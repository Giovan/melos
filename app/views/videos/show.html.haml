- html_attributes(id:"video-show",classes:"videos")
- publisher = @video.publisher
- @sidebar = false
- @title = "#{strip_tags(@video.title)} - #{@video.credits} | #{t('videos.title')}"
- meta_title = strip_tags(@video.title)
- meta_description = @title
- meta_description = @video.description.html_safe if @video.description.present?

- content_for :meta_description do
  = @title

- content_for :additional_meta do
  - locale_dir = (I18n.locale.to_s.eql?("en") or I18n.locale.to_s.eql?("en-GB")) ? '' : '/' + I18n.locale.to_s
  - canonicalHref = "https://www.bible.com#{locale_dir}/videos/#{@video.to_param}"
  %link{rel: "canonical", href: canonicalHref}
  %meta{property: "og:title",       content: meta_title }
  %meta{property: "og:url",         content: canonicalHref }
  %meta{property: "og:description", content: meta_description }
  %meta{property: "og:image", content: "https:#{@video.poster_image.url}"}
  %meta{name: "twitter:card",             content: "summary"}
  %meta{name: "twitter:url",              content: canonicalHref}
  %meta{name: "twitter:title" ,           content: meta_title}
  %meta{name: "twitter:description",      content: meta_description}
  %meta{name: "twitter:image",            content: "https:#{@video.poster_image.url}"}
  %meta{name: "twitter:site",             content: "@YouVersion"}
  %link{href:"http://vjs.zencdn.net/4.11/video-js.css", rel:"stylesheet"}
  %script{src:"http://vjs.zencdn.net/4.11/video.js"}
.row
  .columns
    %article
      %div{itemprop: "video", itemtype:"http://schema.org/VideoObject", itemscope: ""}
        .row
          .columns.medium-8
            #title-bar
              %h1
                %span{itemprop: "name"}= @video.title

              %h2.publisher
                =link_to(@video.credits, publisher_video_path(id: @video.id))
          .columns.medium-4.show-for-medium-up
            = render partial: "videos/share", locals: {video: @video}

        %meta{itemprop: "thumbnail", content: "https:#{@video.poster_image.url}"}
        #player-container
          %video{id:"video", class: "video-js vjs-default-skin vjs-big-play-centered", controls: "controls", preload: "auto",
          width: "100%", height: "100%", poster: "https:#{@video.poster_image.url}"}

            %source{src: "#{@video.webm.url}", type:'video/webm'}
            %source{src: "#{@video.hls.url}", type:'video/mp4'}
            %p.vjs-no-js
              To view this video please enable JavaScript, and consider upgrading to a web browser that
              =link_to("supports HTML5 video", "http://videojs.com/html5-video-support/", target: "_blank")

        .row
          #details.columns.medium-8
            %div.refs
              - if @video.references
                %span= t("videos.related scripture")

                %ul
                  - @video.references.each do |ref|
                    %li= link_to(ref.human, bible_version_path(Reference.new(ref.usfm, version: current_version)))
            %p.description
              %span{itemprop: "description"}= @video.description.html_safe if @video.description.present?

          #other.columns.medium-4
            - video_series = client_settings.video_series
            = link_to( t("videos.all"), video_series.blank? ? videos_path : series_video_path(video_series) , class: "solid-button green full")
            = render partial: "videos/publisher_banner", locals: {publisher: publisher}

- videoRefId = @video.publisher.try(:video_id) ? @video.publisher.video_id : "null"
-content_for :javascripts do
  :javascript
    $(window).load(function () {
      videojs("video", { "controls": true, "autoplay": false, "preload": "auto", "width": '100%', "height": '100%', "poster": "https:#{@video.poster_image.url}" }).ready(function(){

      var publisher_id = #{publisher.id};

      //only setup tracking at the moment for Jesus Film (id: 1)
      if (publisher_id == 1) {
        // create a custom tracker for video events
        var tracker = _gat._createTracker("#{publisher.ga_tracking_id}","videoTracker");

        var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
          return v.toString(16);
        });

        // Keep this around in case we ever need to wrap the tracking code.
        var trackVideoEvent = function( fn ) {
          fn();
        }

        var videoStarted  = false;
        var startTime     = 0;

        // Array to keep track of start/end segments that a user has watched.
        // Each item in the array is an object: {start: 0, end: 2.4}
        // Custom total method setup to iterate through items and total up all segments into total time watched.
        var playTimes = [];

        // Create a named function so that we can reassign the function later on after its cleared.
        var playTimeTotal = function() {
          var timeWatched = 0;
          for(var i = 0; i < this.length; i++) {
            timeWatched += (this[i].end - this[i].start);
          }
          return Math.round(timeWatched);
        }
        playTimes.total = playTimeTotal;

        // the videojs object
        player = this;

        // All video player api handlers below:
        // - onPlay: any time the video starts playing
        // - onPause: any time the video is paused
        // - onComplete: when the video has reached the end
        player.on("play", function(){
          if(videoStarted == false) {
            videoStarted = true;
          }
          // set the new start time every time the video begins playing
          startTime = jwplayer().getPosition()
        });

        player.on("seeked", function(){
          playTimes.push({start: startTime, end: jwplayer().getPosition()});
          startTime = event.offset;
          // event.offset is not super accurate - more than likely due to encoding with low number of key frames.
        });

        player.on("pause", function(){
          playTimes.push({start: startTime, end: jwplayer().getPosition()});
        });

        player.on("ended", function(){

          playTimes.push({start: startTime, end: jwplayer().getPosition()})

          trackVideoEvent( function() {
            var timestamp = Math.round((new Date()).getTime() / 1000);
            _gaq.push(
              ['videoTracker._setCustomVar',1,'apiSessionId', guid],
              ['videoTracker._trackEvent', '#{videoRefId}' , 'mediaViewTime', playTimes.total().toString() , 0],
              ['videoTracker._trackEvent', '#{videoRefId}' , 'mediaComplete', timestamp.toString() , 0],
              ['videoTracker._trackEvent', '#{videoRefId}' , 'domain', 'YouVersion', 0]
            );
          });

          // Reset to initial values.
          videoStarted    = false;
          startTime       = 0;
          playTimes       = [];
          playTimes.total = playTimeTotal;
        });

        $(window).unload(function() {
          // dont track anything if the video is not in a started/playing state
          if(videoStarted != false) {
            playTimes.push({start: startTime, end: jwplayer().getPosition()})

            trackVideoEvent( function() {
              var timestamp = Math.round((new Date()).getTime() / 1000);
              _gaq.push(
                ['videoTracker._setCustomVar',1,'apiSessionId', guid],
                ['videoTracker._trackEvent', '#{videoRefId}' , 'mediaViewTime', playTimes.total().toString() , 0],
                ['videoTracker._trackEvent', '#{videoRefId}' , 'mediaComplete', timestamp.toString() , 0],
                ['videoTracker._trackEvent', '#{videoRefId}' , 'domain', 'YouVersion', 0]
              );
            });
          }
        });
      }
      });
    })