- @title = "Plan Calendar and Progress"
- @sidebar = false
- @header_title = t(@subscription.name)
- @header = true

- content_for :header do
  %a#slideRight.nav_btn{:href => '#nav_primary'}
    View Navigation
  %h1#page_title= link_to t(@subscription.name), plan_path(@subscription)
  - if @subscription.is_a? Subscription
    %nav.right_nav
      %a.settings_btn{:href => plan_settings_path(@subscription)}

.combo_button
  = link_to t("plans.month"), plan_calendar_path(@subscription), class: 'highlighted'
  = link_to t("plans.about"), plan_path(@subscription, ignore_subscription: true)

%article.readingplans

  :ruby
    statuses = @subscription.day_statuses
    sunday = Date.new(1984,12,9)#sunday
    days_of_week = []
    7.times {|i| days_of_week << sunday.next_day(i).strftime('%^a')[0]}

  - while !statuses.empty?
    %table.cal_month.cal_janurary{:cellspacing => "0"}
      :ruby
        first_date = Date.parse(statuses.first.date)
        last_date = first_date.next_month - (first_date.next_month.day)
        full_month = false
      %caption
        =first_date.strftime('%B %Y')
      %thead
        %tr
          -days_of_week.each do |day|
            %th= day
      %tbody
        :ruby
          rows = 0
          cur_date = first_date - (first_date.day - 1) - (first_date - (first_date.day - 1)).cwday       # first calendar day (given tabular calendar starting on Sun)
          cur_date = cur_date.next_day(7) if first_date.prev_day(first_date.day - 1) - cur_date == 7       # if first day of month is a sunday (more clear than doing on the previous line)
        - # while there are remaining items that are in this current month  -OR-  we haven't listed a full month (of days or enough rows)
        - while ((!statuses.empty? && (Date.parse((cur_status = statuses.first).date).month) == first_date.month)) || (!full_month) || rows < 6
          %tr
            - 7.times do       # List out one week
              - if full_month
                %td.disabled.hidden
              - else
                - if cur_date.month != first_date.month || cur_date < first_date || statuses.empty?         # if not in current month  -OR-  not a day on the paln
                  -if cur_date.month != first_date.month
                    %td.disabled{class: cur_date == current_date ? "today" : ""}
                  -else
                    %td
                      %span.inactive-day{class: cur_date == current_date ? "today" : ""}= cur_date.day.to_s
                - else
                  - cur_status = statuses.delete_at(0)
                  %td.active-day{class: (cur_status.completed ? 'read' : !cur_status.references_completed.empty? ? 'partial' : '') << ((cur_date == current_date) ? ' today' : '')}
                    = link_to(cur_date.day.to_s, plan_path(@subscription.to_param, day: cur_status.day))
                - cur_date = cur_date.next

            :ruby
              full_month = cur_date > last_date       # it's been a full month if the first day in the next week is after the last day of the current month
              rows += 1
