// js partial shared amongs reader and invalid_ref partials.
// Local Parameters
// presenter: (required) Presenter::Reference or Presenter::Subscription
- reader_menus  = true
- version       = presenter.version
- reference     = presenter.reference
- alt_version   = presenter.respond_to?(:alt_version)   ? presenter.alt_version : nil
- alt_reference = presenter.respond_to?(:alt_reference) ? presenter.alt_reference : nil
- verses        = presenter.respond_to?(:verses)        ? presenter.verses : nil # some of our presenters may not expose the verses (yet)
- focus_verses  = presenter.focus? # for verses focus styling instead of select styling.
- modal_verse   = presenter.respond_to?(:modal_verse)   ? presenter.modal_verse : nil
- a_subscription_chapter = presenter.is_a?(Presenter::Subscription) && presenter.is_chapter?


- content_for   :javascripts do
  - fullscreen  = (client_settings.reader_full_screen && client_settings.reader_full_screen == 1) ? true : false;
  - parallel    = (client_settings.reader_parallel_mode && client_settings.reader_parallel_mode == 1) ? true : false;
  %script
    :plain

      jQuery(document).ready(function() {
        reader = new Reader({
          version: "#{reference[:version].to_s}",
          abbrev: "#{version.try(:abbreviation).downcase}",
          reference: "#{reference.to_param}",
          book: "#{reference[:book].to_s.downcase}",
          book_api: "#{reference[:book].sub(/[A-Z]+/) {|m| m.downcase}}",
          book_human: "#{version.books[reference[:book]].try(:human)}",
          chapter: "#{reference[:chapter].to_s}",
          font: "#{client_settings.reader_font}",
          size: "#{client_settings.reader_font_size}",
          trans_notes: #{client_settings.reader_trans_notes},
          cross_refs: #{client_settings.reader_cross_refs},
          show_highlights: #{client_settings.reader_highlights},
          full_screen: #{fullscreen},
          parallel_mode: #{parallel}
        });
        reader.init();
        var page = window.app.getPage();
            page.setReader( reader );
      });

// Render all necessary menus
- if reader_menus == true
  = render_cell :book_selector, :display, {version: version}
  = render_cell :version_selector, :display, {version: version, recent_versions: recent_versions, reference: reference, site: @site}
  = render(partial:'/shared/modal_single_verse',locals: {modal_verse: modal_verse, reference: reference, version: version}) unless @verse_modals == false ||  modal_verse == nil
  = render(partial: '/shared/menu_settings')
  = render(partial: '/shared/menu_audio_player', locals: {reference: reference})

// Dump a json representation of our @version into the markup for use by reader menus.
// Would like to move this at some point to an API call if at all possible.
= cache "reader_version_json_#{version.to_param}", expires_in: a_long_time do
  - version_json = {abbreviation: version.abbreviation.downcase, id: version.to_param }
  - version_json[:books] = {}
  - books = version.books
  - books.each do |usfm, info|
    - chapters = books[usfm].chapters.map {|c| {human: c.human, usfm: c.usfm.downcase, canon: c.canonical }}
    - version_json[:books][usfm.downcase] = {human: truncate(info.human,length: 40,separator: " "), chapters: chapters }

  / Json representation of our version. Currently used for building our dynamic chapter grid menu.
  / This will be cached along with the entire template
  %script
    :plain
      version_json = #{Oj.dump(version_json).html_safe};
