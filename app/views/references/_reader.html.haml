-# Reader partial to encapsulate all reader functionality
-# Local Parameters
-# presenter: (required) Presenter::Reference or Presenter::Subscription
:ruby
  @is_reader    = true
  @html_classes = []
  @html_classes << "full_screen" if client_settings.reader_full_screen
  @html_classes << "full_screen" << "parallel_mode" if client_settings.reader_parallel_mode
  version       = presenter.version
  reference     = presenter.reference
  alt_version   = presenter.respond_to?(:alt_version)   ? presenter.alt_version : nil
  alt_reference = presenter.respond_to?(:alt_reference) ? presenter.alt_reference : nil
  verses        = presenter.respond_to?(:verses)        ? presenter.verses : nil # some of our presenters may not expose the verses (yet)
  focus_verses  = presenter.focus? # for verses focus styling instead of select styling.
  a_chapter     = presenter.try(:is_chapter?)

- content_for :meta_description do
  = "#{reference.human} #{presenter.version} #{truncate(strip_tags(presenter.content).html_safe, length: 125, separator: " ", omission: '')}"

- content_for :mobile_right_nav do
  = link_to(version.abbreviation, 'javascript:void(0);', id: "m_version_btn" )

- content_for :title_link do
  = link_to(reference.human, 'javascript:void(0);', id:"m_book_chap_btn")


= render partial: "references/reader_header", locals: {reference: reference, version:version, alt_version: alt_version, presenter: presenter}

%article#reader.reader{"class" => (focus_verses && (not a_chapter)) ? "mute" : nil,
  "data-setting-font" => client_settings.reader_font,
  "data-setting-size" => client_settings.reader_font_size,
  "data-fullscreen"   => client_settings.reader_full_screen,
  "data-focused-verses" => (focus_verses ? verses.try(:join,",") : nil),
  "data-book"       => reference[:book].to_s.downcase,
  "data-book-api"   => reference[:book].sub(/[A-Z]+/) {|m| m.downcase},
  "data-book-human" => truncate(version.books[reference[:book]].human, length: 40, separator: " "),
  "data-chapter"    => reference[:chapter].to_s,
  "data-version"    => reference[:version].to_s,
  "data-setting-trans-notes" => client_settings.reader_trans_notes,
  "data-setting-cross-refs" => client_settings.reader_cross_refs,
  "data-setting-show-highlights" => client_settings.reader_highlights}

  .wrap
    %div.reader-nav
      :ruby
        direction = 'rtl' if version.try(:rtl?)

      = reader_previous_link(reference, {classes: "reader-prev #{direction}"})
      = reader_next_link(reference, {classes: "reader-next #{direction}"})

    // Primary version content
    #version_primary{class: version.try(:text_direction),
      "data-reference"     => reference.to_param,
      "data-abbreviation"  => version.try(:abbreviation).downcase,
      "data-usfm"          => reference.chapter_usfm}
      
      = presenter.content.html_safe if presenter.content
    
    -# Read Chapter button
    - if presenter.verses.present?
      %p#read_chapter
        %a.action_button_blue{href: reference_path(reference: reference.chapter_usfm.downcase)}
          = t("read reference", reference: reference.to_chapter.human)

    // Secondary version content
    #version_secondary{class: alt_version.try(:text_direction),
      "data-reference"     => alt_reference.to_param,
      "data-abbreviation"  => alt_version.try(:abbreviation).try(:downcase),
      "data-usfm"          => reference.chapter_usfm}
      
      = t('ref.loading secondary')


%footer
  - if version.has_publisher?
    .publisher.as_table
      .vcenter
        .courtesy
          %strong= t("versions.courtesy of", abbreviation: version.abbreviation, publisher: version.publisher.name) if version.blurb
        .blurb= (version.blurb || version.copyright).try :html_safe
      .vcenter
        =link_to t('versions.learn more'), version.url || version_path(version), class: 'button'


= render partial: "references/js", locals: {presenter: @presenter}
