From 3a1d319673d848c4d09e7f1d35439b61a2e24fa6 Mon Sep 17 00:00:00 2001
From: Caedmon Judd <caedmon@statebuilt.com>
Date: Thu, 27 Oct 2011 09:15:44 -0500
Subject: [PATCH 35/55] Created module for Model Init

---
 app/helpers/notes_helper.rb |    1 +
 app/models/note.rb          |   54 ++++++------------------------------------
 app/models/user.rb          |   23 ++----------------
 lib/general.rb              |   39 +++++++++++++++++++++++++++++++
 4 files changed, 51 insertions(+), 66 deletions(-)
 create mode 100644 lib/general.rb

diff --git a/app/helpers/notes_helper.rb b/app/helpers/notes_helper.rb
index 2d99ae9..e44f996 100644
--- a/app/helpers/notes_helper.rb
+++ b/app/helpers/notes_helper.rb
@@ -9,6 +9,7 @@ module NotesHelper
     return_versions.sort
   end
   
+  #TODO: To Delete...
   #def references_breakout(refs, version)
   #  return_refs = ""
   #  if refs
diff --git a/app/models/note.rb b/app/models/note.rb
index b32acdd..1ccbd33 100644
--- a/app/models/note.rb
+++ b/app/models/note.rb
@@ -1,6 +1,7 @@
 class Note
   extend ActiveModel::Naming
   include ActiveModel::Conversion
+  include General
   def persisted?
     false
   end
@@ -9,15 +10,7 @@ class Note
   
   def initialize(params = {})
     reg_data = {id: 0, title: "", content: "", language_iso: "", reference: "", version: "", published: "", user_status: "", share_connections: "", auth: nil}    
-    reg_data.merge! params
-    reg_data.each do |k,v|    
-      # Create instance variable
-      self.instance_variable_set("@#{k}", v)
-      # Create the getter
-      self.class.send(:define_method, k, proc{self.instance_variable_get("@#{k}")})
-      # Create the setter
-      self.class.send(:define_method, "#{k}=", proc{|v| self.instance_variable_set("@#{k}", v)})
-    end
+    initialize_class(self, params, reg_data)    
   end
   
   def to_param    
@@ -75,7 +68,7 @@ class Note
     @content = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE yv-note SYSTEM "http://' << Cfg.api_root << '/pub/yvml_1_0.dtd"><yv-note>' << @content << '</yv-note>'
     @reference = @reference.gsub('+', '%2b')
 
-    response = YvApi.post('notes/create', attributes(:title, :content, :language_iso, :reference, :version,
+    response = YvApi.post('notes/create', class_attributes(:title, :content, :language_iso, :reference, :version,
         :published, :user_status, :shared_connections, :token, :auth)) do |errors|
       @errors = errors.map { |e| e["error"] }      
       return false
@@ -85,12 +78,12 @@ class Note
   end
   
   def update(id, fields)
-    save_values(fields)
+    set_class_values(self, fields)
     @token = Digest::MD5.hexdigest "#{auth.username}.Yv6-#{auth.password}"
     @content = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE yv-note SYSTEM "http://' << Cfg.api_root << '/pub/yvml_1_0.dtd"><yv-note>' << @content << '</yv-note>'
     @reference = @reference.gsub('+', '%2b')
 
-    response = YvApi.post('notes/update', attributes(:id, :title, :content, :language_iso, :reference, :version,
+    response = YvApi.post('notes/update', class_attributes(:id, :title, :content, :language_iso, :reference, :version,
         :published, :user_status, :shared_connections, :token, :auth)) do |errors|
       @errors = errors.map { |e| e["error"] }      
       return false
@@ -101,7 +94,7 @@ class Note
   def destroy
     @token = Digest::MD5.hexdigest "#{auth.username}.Yv6-#{auth.password}"
     
-    response = YvApi.post('notes/delete', attributes(:id, :auth)) do |errors|
+    response = YvApi.post('notes/delete', class_attributes(:id, :auth)) do |errors|
       @errors = errors.map { |e| e["error"] }
       return false
     end
@@ -109,34 +102,13 @@ class Note
   end
   
   private
-  
-  def attributes(*args)
-    array = args
-    array = self.instance_variables.map { |e| e.to_s.gsub("@", "").to_sym} if array == []
-    attrs = {}
-    array.each do |var|
-      attrs[var] = instance_variable_get("@#{var}")
-    end
-    attrs
-  end
-  
-  def save_values(values)
-    values.each do |k,v|    
-      # Create instance variable
-      self.instance_variable_set("@#{k}", v)
-      # Create the getter
-      self.class.send(:define_method, k, proc{self.instance_variable_get("@#{k}")})
-      # Create the setter
-      self.class.send(:define_method, "#{k}=", proc{|v| self.instance_variable_set("@#{k}", v)})
-    end    
-  end
-  
+   
   def self.build_object(response, auth)
     @note = Note.new(response)
     @note.auth = auth
     #@note.content = @note.content_html
     @note.content = @note.content_text
-    @note.reference = hash_to_osis(@note.reference)
+    @note.reference = General::hash_to_osis(@note.reference)
     @note
   end
   
@@ -148,14 +120,4 @@ class Note
     @return_notes
   end
   
-  # PARM (values): Array of Reference hashies
-  # RETURN: String in OSIS format
-  def self.hash_to_osis(values) 
-    return_val = ""
-    values.each do |ref|
-      return_val << "#{ref.osis}+"
-    end
-    return_val[0..-2]
-  end
-      
 end
diff --git a/app/models/user.rb b/app/models/user.rb
index 452a3c9..51d135d 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -3,35 +3,18 @@ require 'digest/md5'
 class User
   extend ActiveModel::Naming
   include ActiveModel::Conversion
+  include General
   attr_accessor :username, :password
   def persisted?
     false
   end
 
-  def attributes(*args)
-    array = args
-    array = self.instance_variables.map { |e| e.to_s.gsub("@", "").to_sym} if array == []
-    attrs = {}
-    array.each do |var|
-      attrs[var] = instance_variable_get("@#{var}")
-    end
-    attrs
-  end
-
   attr_reader :errors
 
   def initialize(params = {})
     params[:agree] = true if params[:agree]
     reg_data = {id: 0, email: "", username: "", password: "", verified: false, agree: false}
-    reg_data.merge! params
-    reg_data.each do |k,v|
-      # Create instance variable
-      self.instance_variable_set("@#{k}", v)
-      # Create the getter
-      self.class.send(:define_method, k, proc{self.instance_variable_get("@#{k}")})
-      # Create the setter
-      self.class.send(:define_method, "#{k}=", proc{|v| self.instance_variable_set("@#{k}", v)})
-    end
+    initialize_class(self, params, reg_data)
   end
 
   def self.find(id)
@@ -53,7 +36,7 @@ class User
   def save
     @token = Digest::MD5.hexdigest "#{@username}.Yv6-#{@password}"
     @secure = true
-    response = YvApi.post('users/create', attributes(:email, :username, :password, :verified, :agree, :token, :secure)) do |errors|
+    response = YvApi.post('users/create', class_attributes(:email, :username, :password, :verified, :agree, :token, :secure)) do |errors|
       @errors = errors.map { |e| e["error"] } if errors
       return false
     end    
diff --git a/lib/general.rb b/lib/general.rb
new file mode 100644
index 0000000..2e4092c
--- /dev/null
+++ b/lib/general.rb
@@ -0,0 +1,39 @@
+module General
+  
+  def initialize_class(instance, params = {}, reg_data)
+    reg_data.merge! params
+    set_class_values(instance, reg_data)
+  end
+  
+  def set_class_values(instance, values)
+    values.each do |k,v|    
+      # Create instance variable
+      self.instance_variable_set("@#{k}", v)
+      # Create the getter
+      self.class.send(:define_method, k, proc{self.instance_variable_get("@#{k}")})
+      # Create the setter
+      self.class.send(:define_method, "#{k}=", proc{|v| self.instance_variable_set("@#{k}", v)})
+    end    
+  end
+  
+  def class_attributes(*args)
+    array = args
+    array = self.instance_variables.map { |e| e.to_s.gsub("@", "").to_sym} if array == []
+    attrs = {}
+    array.each do |var|
+      attrs[var] = instance_variable_get("@#{var}")
+    end
+    attrs
+  end
+  
+  # PARM (values): Array of Reference hashies
+  # RETURN: String in OSIS format
+  def hash_to_osis(values) 
+    return_val = ""
+    values.each do |ref|
+      return_val << "#{ref.osis}+"
+    end
+    return_val[0..-2]
+  end
+  
+end
-- 
1.7.0.4

