From 373480880a2c4c28c2cebaaf3d8dc6c1bcc7af39 Mon Sep 17 00:00:00 2001
From: Caedmon Judd <caedmon@statebuilt.com>
Date: Fri, 21 Oct 2011 14:02:24 -0500
Subject: [PATCH 11/55] Moved authentication to a Hashie (fun to say) :)

---
 app/controllers/application_controller.rb |    7 ++++-
 app/controllers/notes_controller.rb       |   31 +++++++++++++---------------
 app/models/note.rb                        |   28 +++++++++++++-------------
 app/views/layouts/application.html.haml   |    2 +-
 lib/yv_api.rb                             |    4 +-
 5 files changed, 36 insertions(+), 36 deletions(-)

diff --git a/app/controllers/application_controller.rb b/app/controllers/application_controller.rb
index 4611803..1932f56 100644
--- a/app/controllers/application_controller.rb
+++ b/app/controllers/application_controller.rb
@@ -1,6 +1,6 @@
 class ApplicationController < ActionController::Base
   protect_from_forgery
-  helper_method :current_user, :current_username
+  helper_method :current_auth, :current_user, :current_username
 
   # Manually throw a 404
   def not_found
@@ -9,13 +9,16 @@ class ApplicationController < ActionController::Base
 
   private
 
+  def current_auth
+    @tester = Hashie::Mash.new( {'id' => cookies.signed[:a], 'username' => cookies.signed[:b], 'password' => cookies.signed[:c]} ) if cookies.signed[:a]  
+  end
   def current_user
     unless @current_user
       @current_user = User.find(cookies.signed[:a]) if cookies.signed[:a]      
       @current_user.username = cookies.signed[:b]
       @current_user.password = cookies.signed[:c]
     end
-    @current_user
+   @current_user
   end
   def current_username
     User.find(cookies.signed[:a]).username if cookies.signed[:a]      
diff --git a/app/controllers/notes_controller.rb b/app/controllers/notes_controller.rb
index 8dbd50c..97f88af 100644
--- a/app/controllers/notes_controller.rb
+++ b/app/controllers/notes_controller.rb
@@ -1,7 +1,7 @@
 class NotesController < ApplicationController
   
   def index    
-    @notes = Note.all(current_user)    
+    @notes = Note.all(current_auth)    
   end
   
   def new
@@ -13,29 +13,26 @@ class NotesController < ApplicationController
   end
   
   def show
-    @note = Note.find(params[:id], current_user)
+    @note = Note.find(params[:id], current_auth)
   end
   
   def create
     @note = Note.new(params)
-    @note.user = current_user
+    @note.auth = current_auth
     
-    @tester = @note.save
-    #render action: "show"
-    
-    #if @note.save
-    #  render action: "show"
-    #else
-    #  flash[:alert] = []
-    #  @note.errors.each do |error|       
-    #    flash.now[:alert] << error
-    #  end
-    #  render action: "new"
-    #end    
+    if @note.save
+      render action: "show"
+    else
+      flash[:alert] = []
+      @note.errors.each do |error|       
+        flash.now[:alert] << error
+      end
+      render action: "new"
+    end    
   end
   
   def update
-    @note = Note.find(params[:id], current_user)
+    @note = Note.find(params[:id], current_auth)
     @note.user = current_user 
 
     if @note.update_attributes(params[:note])
@@ -50,7 +47,7 @@ class NotesController < ApplicationController
   end
   
   def delete
-    @note = Note.find(params[:id], current_user)
+    @note = Note.find(params[:id], current_auth)
     
     if @note.destroy
       redirect_to '/'
diff --git a/app/models/note.rb b/app/models/note.rb
index 618b767..84b2f93 100644
--- a/app/models/note.rb
+++ b/app/models/note.rb
@@ -18,7 +18,7 @@ class Note
   attr_reader :errors
   
   def initialize(params = {})
-    reg_data = {title: "", content: "", language_iso: "", reference: "", version: "", published: "", user_status: "", share_connections: "", user: nil}    
+    reg_data = {title: "", content: "", language_iso: "", reference: "", version: "", published: "", user_status: "", share_connections: "", auth: nil}    
     reg_data.merge! params
     reg_data.each do |k,v|    
       # Create instance variable
@@ -30,37 +30,37 @@ class Note
     end
   end
   
-  def self.find(id, user) #TODO: Refine to remove user parm
-    response = YvApi.get('notes/view', {:id => id, :user => user} ) do |errors|     
+  def self.find(id, auth) 
+    response = YvApi.get('notes/view', {:id => id, :auth => auth} ) do |errors|     
       @errors = errors.map { |e| e["error"] }
       return false
     end
     @note = Note.new(response)
-    @note.user = user
+    @note.auth = auth
     @note
   end
   
-  def find(id, user)
-    self.class.find(id, user)
+  def find(id, auth)
+    self.class.find(id, auth)
   end
   
-  def self.all(user) #TODO: Refine to remove user parm
-    response = YvApi.get('notes/items', {:user_id => user.id, :user => user} ) do |errors|     
+  def self.all(auth) 
+    response = YvApi.get('notes/items', {:user_id => auth.id, :auth => auth} ) do |errors|     
       @errors = errors.map { |e| e["error"] }
       return false
     end
     response
   end
   
-  def all(user)
-    self.class.all(user)
+  def all(auth)
+    self.class.all(auth)
   end
   
   def save
-    @token = Digest::MD5.hexdigest "#{user.username}.Yv6-#{user.password}"
+    @token = Digest::MD5.hexdigest "#{auth.username}.Yv6-#{auth.password}"
 
     response = YvApi.post('notes/create', attributes(:title, :content, :language_iso, :reference, :version,
-        :published, :user_status, :shared_connections, :token, :user)) do |errors|
+        :published, :user_status, :shared_connections, :token, :auth)) do |errors|
       @errors = errors.map { |e| e["error"] }      
       return false
     end    
@@ -68,8 +68,8 @@ class Note
   end
   
   def destroy
-    @token = Digest::MD5.hexdigest "#{user.username}.Yv6-#{user.password}"    
-    response = YvApi.post('notes/delete', attributes(:id, :user)) do |errors|
+    @token = Digest::MD5.hexdigest "#{auth.username}.Yv6-#{auth.password}"    
+    response = YvApi.post('notes/delete', attributes(:id, :auth)) do |errors|
       @errors = errors.map { |e| e["error"] }
       return false
     end
diff --git a/app/views/layouts/application.html.haml b/app/views/layouts/application.html.haml
index 459dd6f..7f771d4 100644
--- a/app/views/layouts/application.html.haml
+++ b/app/views/layouts/application.html.haml
@@ -8,7 +8,7 @@
   %body
     - flash.each do |key, msg|
       %div{id: key}= msg
-    - if current_username
+    - if current_auth
       %p= "Signed in as #{current_username}"
       %p= link_to "Sign out", sign_out_path
     - else
diff --git a/lib/yv_api.rb b/lib/yv_api.rb
index b109058..37ea697 100644
--- a/lib/yv_api.rb
+++ b/lib/yv_api.rb
@@ -13,7 +13,7 @@ class YvApi
     # For login
     basic_auth opts.delete(:auth_username), opts.delete(:auth_password) if (opts[:auth_username] && opts[:auth_password])
     # For auth'ed API calls with :user => current_user
-    basic_auth opts[:user].username, opts.delete(:user).password if opts[:user]
+    basic_auth opts[:auth].username, opts.delete(:auth).password if opts[:auth]
     # Clean up the path
     path = clean_up(path)
     # Set the request protocol
@@ -48,7 +48,7 @@ class YvApi
     # For login
     basic_auth opts.delete(:auth_username), opts.delete(:auth_password) if (opts[:auth_username] && opts[:auth_password])
     # For auth'ed API calls with :user => current_user
-    basic_auth opts[:user].username, opts.delete(:user).password if opts[:user]
+    basic_auth opts[:auth].username, opts.delete(:auth).password if opts[:auth]
     # Clean up the path
     path = clean_up(path)
     # Set the request protocol
-- 
1.7.0.4

